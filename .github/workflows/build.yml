# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build Release

on:
  push:
    branches: [ "main" ]
    
jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    outputs:
      tag: ${{ env.SHORT_SHA }}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set SHORT Sha
      shell: bash
      run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Package
      run: dotnet publish -c Release --output ./publish --framework net8.0

    - name: Zip for Release (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: Compress-Archive -Path ./CloneDash/bin/Release/net8.0/* -Destination ./CloneDash-Game-Windows.zip

    - name: Zip for Release (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: tar -cf ./CloneDash-Game-Linux.zip ./CloneDash/bin/Release/net8.0/*

    - name: Zip for Release (macOS)
      if: matrix.os == 'macos-latest'
      run: tar -cf ./CloneDash-Game-macOS.zip ./CloneDash/bin/Release/net8.0/*

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        path: ./CloneDash-Game-Windows.zip
        name: CloneDash-Game-Windows

    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        path: ./CloneDash-Game-Linux.zip
        name: CloneDash-Game-Linux

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        path: ./CloneDash-Game-macOS.zip
        name: CloneDash-Game-macOS
  
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Get artifacts 
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          CloneDash-Game-Windows/CloneDash-Game-Windows.zip
          CloneDash-Game-Linux/CloneDash-Game-Linux.zip
          CloneDash-Game-macOS/CloneDash-Game-macOS.zip
        tag_name: ${{ needs.build.outputs.tag }}
        fail_on_unmatched_files: true
